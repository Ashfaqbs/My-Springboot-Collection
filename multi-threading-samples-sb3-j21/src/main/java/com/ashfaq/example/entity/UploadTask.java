package com.ashfaq.example.entity;

import java.time.LocalDateTime;
import java.util.UUID;

import org.hibernate.annotations.UuidGenerator;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "upload_task")
@Data
@AllArgsConstructor
@NoArgsConstructor
public class UploadTask {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private Integer productCount;
	private LocalDateTime uploadDate;
	private String action; // e.g., "mass-update"

//	private String status; // e.g., "In Progress", "Success", "Semi-success", "Failed"
//Using Enums instead of String as  good practice because enums provide type safety and allow you to define a fixed set of values for a field, preventing invalid values from being stored.

	@Enumerated(EnumType.STRING)
	@Column(name = "status")
	private UploadStatus status; // Using enum instead of String

//	how to set :
//	uploadTask.setStatus(UploadStatus.IN_PROGRESS);
	
	
	@UuidGenerator
	@Column(name = "transaction_id", nullable = false, unique = true, length = 36)
	private UUID transactionId;

//	 above one is automatically set no need to set while the object is created 
//	 when the object is created the uuid is generated by hibernate and saved in db
//	 how ever if we want to have the control of saving the data for this variable 
//	 we can use  : uploadTask.setTransactionId(UUID.randomUUID()); // If you want to generate the UUID manually

}
